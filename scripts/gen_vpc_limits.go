// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//go:build ignore
// +build ignore

package main

import (
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"text/template"
	"time"

	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/ec2"
	"sigs.k8s.io/controller-runtime/pkg/log/zap"
)

var (
	BranchENILimitsFile = "config/StandaloneBranchLimits.cfg"
	VPCLimitsFileName   = "../pkg/aws/vpc/limits.go"
)

type VPCLimits struct {
	Interface            int
	IPv4PerInterface     int
	IsTrunkingCompatible bool
	BranchInterface      int
}

func main() {
	log := zap.New(zap.UseDevMode(true))

	sess := session.Must(session.NewSessionWithOptions(session.Options{
		SharedConfigState: session.SharedConfigEnable,
	}))
	_, err := sess.Config.Credentials.Get()

	svc := ec2.New(sess)

	describeInstanceInput := &ec2.DescribeInstanceTypesInput{}
	limitsMap := make(map[string]*VPCLimits)

	for {
		// Make EC2 call to describe the instance type till the
		output, err := svc.DescribeInstanceTypes(describeInstanceInput)
		if err != nil {
			log.Error(err, "failed to describe the instance")
			panic(err)
		}

		for _, instanceDetail := range output.InstanceTypes {
			limit := &VPCLimits{
				Interface:            int(*instanceDetail.NetworkInfo.MaximumNetworkInterfaces),
				IPv4PerInterface:     int(*instanceDetail.NetworkInfo.Ipv4AddressesPerInterface),
				IsTrunkingCompatible: false,
			}
			limitsMap[*instanceDetail.InstanceType] = limit
		}

		if output.NextToken == nil {
			break
		}

		describeInstanceInput = &ec2.DescribeInstanceTypesInput{
			NextToken: output.NextToken,
		}
	}

	log.Info("instance retrieved", "count", len(limitsMap))

	// Get the Branch ENIDetails
	branchConfigPath, _ := filepath.Abs(BranchENILimitsFile)
	branchENIFileContent, err := ioutil.ReadFile(branchConfigPath)
	if err != nil {
		panic(err)
	}
	instanceLimits := strings.Split(string(branchENIFileContent), "\n")

	// Regex pattern to parse the temporary branch limits file
	matchInstanceType, _ := regexp.Compile(`[^#].*".*"`)
	matchCapacity, _ := regexp.Compile(`[0-9]*;`)

	// For each instance from the custom file, edit the branch limits for the map generated using the EC2 API Call
	for _, instanceLimit := range instanceLimits {
		if matchInstanceType.MatchString(instanceLimit) && matchCapacity.MatchString(instanceLimit) {
			instanceType := strings.ReplaceAll(matchInstanceType.FindString(instanceLimit), "\"", "")
			instanceLimit := strings.ReplaceAll(matchCapacity.FindString(instanceLimit), ";", "")

			// Trim whitespaces
			instanceType = strings.TrimSpace(instanceType)

			branchLimit, _ := strconv.Atoi(instanceLimit)
			limit, found := limitsMap[instanceType]
			if !found {
				log.Info("skipping instance as failed to find details from ec2 describe instance type call",
					"instance type", instanceType)
				continue
			}

			limit.IsTrunkingCompatible = true
			limit.BranchInterface = branchLimit - limit.Interface
		}
	}

	// Generate the file
	f, err := os.Create(VPCLimitsFileName)
	if err != nil {
		panic(err)
	}
	limitsTemplate.Execute(f, struct {
		Timestamp string
		Limits    map[string]*VPCLimits
	}{
		Timestamp: time.Now().Format(time.RFC3339),
		Limits:    limitsMap,
	})

	vpcFileAbsPath, _ := filepath.Abs(VPCLimitsFileName)

	log.Info("running go fmt on the generated file", "file", vpcFileAbsPath)

	cmd := exec.Command("go", "fmt", vpcFileAbsPath)
	err = cmd.Run()
	if err != nil {
		panic(err)
	}
}

var limitsTemplate = template.Must(template.New("").Parse(`// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by go generate; DO NOT EDIT.
// This file was generated at {{ .Timestamp }}

package vpc

type VPCLimits struct {
	Interface            int
	IPv4PerInterface     int
	IsTrunkingCompatible bool
	BranchInterface      int
}

// VPC Limits and flags for ENI and IPv4 Addresses
var Limits = map[string]*VPCLimits {
{{- range $key, $value := .Limits }} 	
	"{{$key}}":	 {Interface: {{.Interface}}, IPv4PerInterface: {{.IPv4PerInterface}}, IsTrunkingCompatible: {{.IsTrunkingCompatible}}, BranchInterface: {{.BranchInterface}}},
{{- end }}
}
`))
